application:
  project: protocol

server:
  shutdown: graceful
  port: 8080

spring:
  application.name: union-listener
  jackson:
    mapper:
      ACCEPT_CASE_INSENSITIVE_ENUMS: true
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
    default-property-inclusion: non_null
  aop:
    proxy-target-class: false
  main:
    banner-mode: log
    web-application-type: reactive
mongock:
  change-logs-scan-package:
    - com.rarible.protocol.union.enrichment.migration

rarible:
  core:
    apm:
      agent:
        enabled: true
        server: http://elk_apm-server:8200
        packages: com.rarible.protocol.union.listener
      web:
        filter:
          enabled: false
      annotation:
        enabled: true
  ethereum:
    converter:
      enabled: true
  cache:
    use-locks: true
  loader:
    broker-replica-set: ${kafka.hosts}
    topicsPrefix: protocol.${application.environment}.union.internal.loader
    workers: 4
    loadTasksBatchSize: 10
    retry:
      # Retry after 24h
      backoffDelaysMillis: [ 86400000 ]
      job:
        runner:
          period: 30000 # Schedule retry tasks every 30s

common:
  producer:
    broker-replica-set: ${kafka.hosts}
  currency:
    refresh:
      cron: "0 0/30 * * * *"
  useLegacyRepository: true


integration:
  ethereum:
    enabled: ${consul.ethereum.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.ethereum.auctionContracts:}
  polygon:
    enabled: ${consul.polygon.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.polygon.auctionContracts:}
  flow:
    enabled: ${consul.flow.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.flow.auctionContracts:}
  tezos:
    enabled: ${consul.tezos.enabled:true}
    client:
      url: ${consul.tezos.api.baseUrl}
    consumer:
      broker-replica-set: ${consul.tezos.kafka.hosts}
      username: ${consul.tezos.kafka.username}
      password: ${consul.tezos.kafka.password}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.tezos.auctionContracts:}
  solana:
    enabled: ${consul.solana.enabled:false}

listener:
  consumer:
    broker-replica-set: ${kafka.hosts}
    workers:
      wrapped: 10
  reconciliation:
    orderBatchSize: 50
    auctionBatchSize: 50
    threadCount: 2
    notificationEnabled: false
  openSeaCleanup:
    enabled: true
    #sellOrderFrom: "2022-02-06T00:00:00.000Z"
    itemBatchSize: 100
    ownershipBatchSize: 50
  price-update:
    rate: PT5M
    delay: PT1M
  reconcile-marks:
    rate: PT15S
    delay: PT1M

meta:
  ipfsGateway: "https://rarible.mypinata.cloud/"
  mediaFetchTimeout: 10000
  mediaFetchMaxSize: 10485760
  openSeaProxyUrl: ${consul.meta.openSeaProxyUrl}
