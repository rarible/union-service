application:
  project: protocol

server:
  shutdown: graceful
  port: 8080

spring:
  application.name: union-listener
  jackson:
    mapper:
      ACCEPT_CASE_INSENSITIVE_ENUMS: true
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
    default-property-inclusion: non_null
  aop:
    proxy-target-class: false
  main:
    banner-mode: log
    web-application-type: reactive
mongock:
  change-logs-scan-package:
    - com.rarible.protocol.union.enrichment.migration

rarible:
  ethereum:
    converter:
      enabled: true
  cache:
    use-locks: true

common:
  producer:
    broker-replica-set: ${kafka.hosts}
  currency:
    refresh:
      cron: "0 0/30 * * * *"
  client:
    tezos:
      url: "${consul.tezos.api.baseUrl}"

listener:
  consumer:
    ethereum:
      broker-replica-set: ${kafka.hosts}
      itemWorkers: 1
      ownershipWorkers: 2
      orderWorkers: 5
    polygon:
      broker-replica-set: ${kafka.hosts}
      itemWorkers: 1
      ownershipWorkers: 1
      orderWorkers: 2
    flow:
      broker-replica-set: ${kafka.hosts}
      itemWorkers: 1
      ownershipWorkers: 1
      orderWorkers: 1
    tezos:
      broker-replica-set: ${consul.tezos.kafka.hosts}
      itemWorkers: 1
      ownershipWorkers: 1
      orderWorkers: 1
      username: ${consul.tezos.kafka.username}
      password: ${consul.tezos.kafka.password}
  reconciliation:
    orderBatchSize: 50
    threadCount: 2
  price-update:
    rate: PT5M
    delay: PT1M

meta:
  ipfsGateway: "https://ipfs.rarible.com/"
  mediaFetchTimeout: 10000
  mediaFetchMaxSize: 262144
  openSeaProxyUrl: ${consul.meta.openSeaProxyUrl}

