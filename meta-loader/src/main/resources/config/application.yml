application:
  project: protocol

server:
  shutdown: graceful
  port: 8080

spring:
  application.name: union-meta-loader
  jackson:
    mapper:
      ACCEPT_CASE_INSENSITIVE_ENUMS: true
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
    default-property-inclusion: non_null
  aop:
    proxy-target-class: false
  main:
    banner-mode: log
    web-application-type: reactive

rarible:
  core:
    apm:
      agent:
        enabled: true
        server: http://elk_apm-server:8200
        packages: com.rarible.protocol.union.meta.loader
      web:
        filter:
          enabled: false
      annotation:
        enabled: true
  loader:
    broker-replica-set: ${kafka.hosts}
    topicsPrefix: protocol.${application.environment}.union.internal.loader
    enableNotifications: false
    enableWorkers: true
    enableRetrySchedulerJob: false
    workers: 4
    loadTasksBatchSize: 10
    retry:
      # Retry after 5m, 12h, 24h
      backoffDelaysMillis: [ 300000, 43200000, 86400000 ]
      job:
        runner:
          period: 30000 # Schedule retry tasks every 30s

meta:
  ipfsGateway: "https://rarible.mypinata.cloud/"
  mediaFetchMaxSize: 131072 # 128 Kb
  openSeaProxyUrl: ${consul.meta.openSeaProxyUrl}
  http-client:
    type: KTOR_CIO # KTOR_APACHE, KTOR_CIO
    thread-count: 1
    time-out: 10000
    total-connection: 1000
    reset-on-error: true

integration:
  ethereum:
    enabled: ${consul.ethereum.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.ethereum.auctionContracts:}
  polygon:
    enabled: ${consul.polygon.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.polygon.auctionContracts:}
  flow:
    enabled: ${consul.flow.enabled:true}
    consumer:
      broker-replica-set: ${kafka.hosts}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.flow.auctionContracts:}
  tezos:
    enabled: ${consul.tezos.enabled:true}
    client:
      url: ${consul.tezos.api.baseUrl}
    consumer:
      broker-replica-set: ${consul.tezos.kafka.hosts}
      username: ${consul.tezos.kafka.username}
      password: ${consul.tezos.kafka.password}
      workers:
        item: 1
        ownership: 1
        order: 1
    auctionContracts: ${consul.tezos.auctionContracts:}
  solana:
    enabled: ${consul.solana.enabled:false}

#  Not needed in the meta-loader module. Transitive dependency onto the "core" module
common:
  producer:
    broker-replica-set: ${kafka.hosts}

# Disable verbose logs of Apache HTTP client used to load content media metadata.
logging:
  level:
    org.apache.http: ERROR
